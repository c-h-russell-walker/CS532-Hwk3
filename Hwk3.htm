<!DOCTYPE html>
<!-- Chris Russell-Walker
    BU MET CS532 Comp Graphics
    Hwk3
<!--
/*
 * Copyright (C) 2009 Apple Inc. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Hwk - 3</title>
<script type="text/javascript" src="https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/sdk/demos/common/webgl-utils.js"></script>
<script type="text/javascript" src="https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/sdk/debug/webgl-debug.js"></script>
<script src="http://code.jquery.com/jquery-1.6.4.min.js" type="text/javascript"> </script>
<script src="toji-gl-matrix-218c908/gl-matrix.js" type="text/javascript"> </script>
<script id="vshader-lesson4" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    
    varying vec4 vColor;
    
    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vColor = aVertexColor;
    }
</script>
<script id="fshader-lesson4" type="x-shader/x-fragment">
    #ifdef GL_ES
    precision highp float;
    #endif

    varying vec4 vColor;
    
    void main(void) {
        gl_FragColor = vColor;
    }
</script>
<script>
    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

    var gl;
    var teapotData;

    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }

    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "fshader-lesson4");
        var vertexShader = getShader(gl, "vshader-lesson4");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
        gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }

    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }

    function init() {
        initShaders();
        gl.enable(gl.DEPTH_TEST);
        // Set up mouse/keyboard events
        $(window).keydown(keyHandler);

        // Set up a uniform variable for the shaders
        // Not used yet
        // gl.uniform3f(gl.getUniformLocation(gl.program, "lightDir"), 0, 0, 1);

        cubeVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        vertices = [
        // Front face
            -1.0, -1.0, 1.0,
             1.0, -1.0, 1.0,
             1.0, 1.0, 1.0,
            -1.0, 1.0, 1.0,

        // Back face
            -1.0, -1.0, -1.0,
            -1.0, 1.0, -1.0,
             1.0, 1.0, -1.0,
             1.0, -1.0, -1.0,

        // Top face
            -1.0, 1.0, -1.0,
            -1.0, 1.0, 1.0,
             1.0, 1.0, 1.0,
             1.0, 1.0, -1.0,

        // Bottom face
            -1.0, -1.0, -1.0,
             1.0, -1.0, -1.0,
             1.0, -1.0, 1.0,
            -1.0, -1.0, 1.0,

        // Right face
             1.0, -1.0, -1.0,
             1.0, 1.0, -1.0,
             1.0, 1.0, 1.0,
             1.0, -1.0, 1.0,

        // Left face
            -1.0, -1.0, -1.0,
            -1.0, -1.0, 1.0,
            -1.0, 1.0, 1.0,
            -1.0, 1.0, -1.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        cubeVertexPositionBuffer.itemSize = 3;
        cubeVertexPositionBuffer.numItems = 24;

        cubeVertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);

        var colors = new Uint8Array(
            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,     // v0-v1-v2-v3 front
               1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1,     // v0-v3-v4-v5 right
               0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,     // v0-v5-v6-v1 top
               1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1,     // v1-v6-v7-v2 left
               1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,     // v7-v4-v3-v2 bottom
               0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]    // v4-v7-v6-v5 back
                                                );
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        cubeVertexColorBuffer.itemSize = 4;
        cubeVertexColorBuffer.numItems = 24;

        cubeVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        var cubeVertexIndices = [
            0, 1, 2, 0, 2, 3,    // Front face
            4, 5, 6, 4, 6, 7,    // Back face
            8, 9, 10, 8, 10, 11,  // Top face
            12, 13, 14, 12, 14, 15, // Bottom face
            16, 17, 18, 16, 18, 19, // Right face
            20, 21, 22, 20, 22, 23  // Left face
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        cubeVertexIndexBuffer.itemSize = 1;
        cubeVertexIndexBuffer.numItems = 36;

        // Teapot Buffers
        teapotVertexNormalBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, teapotVertexNormalBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(teapotData.vertexNormals), gl.STATIC_DRAW);
        teapotVertexNormalBuffer.itemSize = 3;
        teapotVertexNormalBuffer.numItems = teapotData.vertexNormals.length / 3;

        teapotVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, teapotVertexTextureCoordBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(teapotData.vertexTextureCoords), gl.STATIC_DRAW);
        teapotVertexTextureCoordBuffer.itemSize = 2;
        teapotVertexTextureCoordBuffer.numItems = teapotData.vertexTextureCoords.length / 2;

        teapotVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, teapotVertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(teapotData.vertexPositions), gl.STATIC_DRAW);
        teapotVertexPositionBuffer.itemSize = 3;
        teapotVertexPositionBuffer.numItems = teapotData.vertexPositions.length / 3;

        teapotVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, teapotVertexIndexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(teapotData.indices), gl.STATIC_DRAW);
        teapotVertexIndexBuffer.itemSize = 1;
        teapotVertexIndexBuffer.numItems = teapotData.indices.length;
    }

    var teapotVertexPositionBuffer;
    var teapotVertexNormalBuffer;
    var teapotVertexTextureCoordBuffer;
    var teapotVertexIndexBuffer;

    function loadTeapot() {
        var request = new XMLHttpRequest();
        request.open("GET", "teapot.json");
        request.onreadystatechange = function () {
            if (request.readyState == 4) {
                teapotData = JSON.parse(request.responseText);
                start();
            }
        }
        request.send();
    }

    width = -1;
    height = -1;
    var requestId;

    var cubePos = 0;
    var camDist = -20;
    var camPos = 0;
    var camRoll = 1;
    var camPitch = 0;
    var camYaw = 0;
    var camHeight = 0;
    var camLeftRight = 0;
    var incAngle = 0;

    var reverse = false;
    var quirkyOrbit = false;
    var wackyOrbit = false;

    // Key Handlers
    function keyHandler(e) {
        if (e.keyCode == 32) { // Space Bar for start/stop
            if (incAngle != 0)
                incAngle = 0;
            else
                incAngle = 0.5;
        }
        /*** Object Movement ***/
        if (e.keyCode == 189) // Minus sign for speed up
            incAngle -= 0.1;
        if (e.keyCode == 187) // Plus sign for speed up
            incAngle += 0.1;
        if (e.keyCode == 66) // "B" backwards rotation
            reverse = true;
        if (e.keyCode == 70) // "F" forward rotation
            reverse = false;
        /*** Roll, Pitch, Yaw - X, Y, Z ****/
        // "R" for roll - shift for negative
        if (e.keyCode == 82 && !e.shiftKey)
            camRoll += 0.1;
        if (e.keyCode == 82 && e.shiftKey)
            camRoll -= 0.1;
        // "P" for pitch - shift for negative
        if (e.keyCode == 80 && !e.shiftKey)
            camPitch += 0.1;
        if (e.keyCode == 80 && e.shiftKey)
            camPitch -= 0.1;
        if (e.keyCode == 37) // Left arrow for yaw
            camYaw -= 0.1;
        if (e.keyCode == 39) // Right arrow for yaw
            camYaw += 0.1;
        // "Z" for camera distance
        if (e.keyCode == 90 && !e.shiftKey)
            camDist += 1;
        if (e.keyCode == 90 && e.shiftKey)
            camDist -= 1; // 
        /*** Camera location ***/
        if (e.keyCode == 87) // "W" up
            camHeight += 0.5;
        if (e.keyCode == 65) // "A" left
            camLeftRight -= 0.5;
        if (e.keyCode == 83) // "S" down
            camHeight -= 0.5;
        if (e.keyCode == 68) // "D" right
            camLeftRight += 0.5;
        /*** Orbits ***/
        if (e.keyCode == 81) // "Q"
            quirkyOrbit = !quirkyOrbit;
        if (e.keyCode == 75) // "K"
            wackyOrbit = !wackyOrbit;
    }

    function reshape(gl) {
        var canvas = document.getElementById('hwk-3');
        var windowWidth = window.innerWidth - 20;
        var windowHeight = window.innerHeight - 40;
        if (windowWidth == width && windowHeight == height)
            return;

        width = windowWidth;
        height = windowHeight;
        canvas.width = width;
        canvas.height = height;

        gl.viewport(0, 0, width, height);
    }

    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }

    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }

    function drawPicture(gl) {
        reshape(gl);

        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        

        mat4.identity(mvMatrix);
        // Translates both cube and teapot
        mat4.translate(mvMatrix, [0, 0.0, -8.0]);

        // PUSH - cube
        mvPushMatrix();
        // If need to translate Cube do it here
        mat4.rotate(mvMatrix, degToRad(90), [1, 0, 0]); // Get green face forward
        mat4.rotate(mvMatrix, degToRad(cubePos), [0, 1, 0]);
        /**** DRAW CUBE ****/
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();

        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        //mvPopMatrix();
        /**** END CUBE ****/

        // PUSH - teapot
        mat4.translate(mvMatrix, [0, 0, -3]);
        mat4.rotate(mvMatrix, degToRad(-90), [1, 0, 0]);
        mat4.scale(mvMatrix, [0.25, 0.25, 0.25]);
        // mat4.translate(mvMatrix, [0, 18, -65]);
        //mvPushMatrix();

        /**** DRAW TEAPOT ****/
        // TO DO -shininess and texture
        gl.uniform1i(shaderProgram.samplerUniform, 0);
        gl.uniform1f(shaderProgram.materialShininessUniform, 10);
        gl.bindBuffer(gl.ARRAY_BUFFER, teapotVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, teapotVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        /*gl.bindBuffer(gl.ARRAY_BUFFER, teapotVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, teapotVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);*/
        gl.bindBuffer(gl.ARRAY_BUFFER, teapotVertexNormalBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, teapotVertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, teapotVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, teapotVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        /**** END TEAPOT ****/
        mvPopMatrix();

        mat4.identity(pMatrix);
        mvPushMatrix();
        
        // mat4.lookat(eye, center, up, dest)
        mat4.lookAt([camLeftRight, camHeight, camDist], [0, 0, 0], [camRoll, camPitch, camYaw], pMatrix);
        //mat4.lookAt(this.getPosition(), vec3.add(center, panVector, vector2), up, mvMatrix);
        
        // mat4.perspective(fovy, aspect, near, far, dest)
        mat4.perspective(camDist, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
        
        mvPopMatrix();
        mat4.rotateX(pMatrix, degToRad(camRoll));
        mat4.rotateY(pMatrix, degToRad(camPitch));
        mat4.rotateZ(pMatrix, degToRad(camYaw));
        mat4.translate(pMatrix, [camLeftRight, camHeight, camDist]);
        
        if (reverse)
            cubePos -= incAngle;
        else
            cubePos += incAngle;
        if (cubePos > 360)
            cubePos -= 360;
    }

    function start() {
        var c = document.getElementById("hwk-3");
        var w = Math.floor(window.innerWidth * 0.9);
        var h = Math.floor(window.innerHeight * 0.9);

        c.width = w;
        c.height = h;

        initGL(c);
        init();

        var f = function () {
            requestId = window.requestAnimFrame(f, c);
            drawPicture(gl);
        };
        f();
    }
</script>
</head>
<body onload="loadTeapot();">
<canvas id="hwk-3">
    If you're seeing this your web browser doesn't support the &lt;canvas>&gt; element. Ouch!
</canvas>
<div class="text"></div>
<div id="framerate"></div>
<div>
<ul>
<li style="display: inline;">Space Bar for stop/start |</li>
<li style="display: inline;">"+/=" For speeding up |</li>
<li style="display: inline;">"-/_" for slowing down |</li>
<li style="display: inline;">"R" for reverse rotation |</li>
<li style="display: inline;">"F" for forward rotation |</li>
<li style="display: inline;">Left arrow for left yaw |</li>
<li style="display: inline;">Right arrow for right yaw |</li>
<li style="display: inline;">"Z" for camera zoom - hold shift for closer |</li>
<li style="display: inline;">"R" for roll - hold shift for negative |</li>
<li style="display: inline;">"P" for pitch - hold shift for negative |</li>
<li style="display: inline;">"WASD" - for camera movement</li>
</ul>
</div>
</body>